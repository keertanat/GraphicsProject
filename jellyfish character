import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.imageio.ImageIO;

public class JellyAnimation extends JFrame {

    private static final int WIDTH = 800;
    private static final int HEIGHT = 600;
    private static final Color LIGHT_BLUE = new Color(173, 216, 230);

    private final List<Jellyfish> jellyfishList;

    public JellyAnimation() {
        setTitle("Upward Jellyfish Animation");
        setSize(WIDTH, HEIGHT);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JellyfishPanel jellyfishPanel = new JellyfishPanel();
        add(jellyfishPanel);

        jellyfishList = new ArrayList<>();

        // Initialize jellyfish with random positions and speeds
        Random random = new Random();
        for (int i = 0; i < 5; i++) {
            int x = random.nextInt(WIDTH);
            int y = random.nextInt(HEIGHT);
            int speed = random.nextInt(3) + 1; // Speed between 1 and 3
            jellyfishList.add(new Jellyfish(x, y, speed));
        }

        // Create and start the animation thread
        Thread animationThread = new Thread(() -> {
            while (true) {
                moveJellyfish();
                // Repaint the jellyfish panel to update the display
                SwingUtilities.invokeLater(() -> jellyfishPanel.repaint());
                // No sleep code to control animation speed without introducing delays
            }
        });
        animationThread.start();

        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void moveJellyfish() {
        // Move each jellyfish in the list
        for (Jellyfish jellyfish : jellyfishList) {
            jellyfish.move();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(JellyfishAnimation::new);
    }

    private class JellyfishPanel extends JPanel {

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            // Draw jellyfish
            for (Jellyfish jellyfish : jellyfishList) {
                jellyfish.draw(g, this);
            }
        }
    }

    private class Jellyfish {
        private int x;
        private int y;
        private int speed;
        private BufferedImage jellyfishImage;

        public Jellyfish(int x, int y, int speed) {
            this.x = x;
            this.y = y;
            this.speed = speed;

            // Load the jellyfish image
            try {
                // Change the image URL to the correct one
                String imageURL = "/Users/sanasingh/Downloads/jelly.png";
                jellyfishImage = ImageIO.read(new File(imageURL));
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public void move() {
            // Move the jellyfish upwards
            y -= speed;

            // Wrap around to the bottom when the jellyfish goes beyond the top edge
            if (y < -jellyfishImage.getHeight()) {
                y = HEIGHT;
            }
        }

        public void draw(Graphics g, JComponent component) {
            // Draw the jellyfish image
            if (jellyfishImage != null) {
                g.drawImage(jellyfishImage, x, y, component);
            }
        }
    }
}
